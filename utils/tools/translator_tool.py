import logging
import requests
from typing import Optional
from langchain.tools import Tool

logger = logging.getLogger(__name__)


class Translator:
    """
    Traductor usando MyMemory Translation API
    API: mymemory.translated.net (gratuita, sin key necesaria)
    L√≠mite: 1000 caracteres por request, 5000 requests/d√≠a
    """
    
    def __init__(self):
        # API p√∫blica gratuita m√°s estable
        self.base_url = "https://api.mymemory.translated.net/get"
        
        # C√≥digos de idiomas soportados
        self.languages = {
            'es': 'Espa√±ol',
            'en': 'English',
            'fr': 'Fran√ßais',
            'de': 'Deutsch',
            'it': 'Italiano',
            'pt': 'Portugu√™s',
            'ru': '–†—É—Å—Å–∫–∏–π',
            'zh': '‰∏≠Êñá',
            'ja': 'Êó•Êú¨Ë™û',
            'ko': 'ÌïúÍµ≠Ïñ¥',
            'ar': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
            'hi': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
            'nl': 'Nederlands',
            'pl': 'Polski',
            'tr': 'T√ºrk√ße',
            'sv': 'Svenska',
            'da': 'Dansk',
            'fi': 'Suomi',
            'no': 'Norsk',
            'cs': 'ƒåe≈°tina',
        }
        
        # Emojis de banderas por idioma
        self.flags = {
            'es': 'üá™üá∏', 'en': 'üá∫üá∏', 'fr': 'üá´üá∑', 'de': 'üá©üá™',
            'it': 'üáÆüáπ', 'pt': 'üáµüáπ', 'ru': 'üá∑üá∫', 'zh': 'üá®üá≥',
            'ja': 'üáØüáµ', 'ko': 'üá∞üá∑', 'ar': 'üá∏üá¶', 'hi': 'üáÆüá≥',
            'nl': 'üá≥üá±', 'pl': 'üáµüá±', 'tr': 'üáπüá∑'
        }
        
        logger.info("‚úÖ Translator inicializado (MyMemory API)")
    
    
    def translate(self, text: str, source_lang: str = 'auto', target_lang: str = 'es') -> dict:
        """
        Traduce texto de un idioma a otro
        
        Args:
            text: Texto a traducir
            source_lang: C√≥digo de idioma origen ('auto' para detectar)
            target_lang: C√≥digo de idioma destino (ej: 'es', 'en')
            
        Returns:
            Diccionario con resultado o error
        """
        try:
            # Normalizar c√≥digos
            source_lang = source_lang.lower().strip()
            target_lang = target_lang.lower().strip()
            
            # Validar longitud del texto
            if len(text) > 1000:
                return {'error': 'Texto demasiado largo. M√°ximo 1000 caracteres.'}
            
            if not text.strip():
                return {'error': 'El texto est√° vac√≠o.'}
            
            # Si es auto, intentar detectar idioma b√°sico
            if source_lang == 'auto':
                # Detecci√≥n simple: si tiene caracteres latinos espa√±oles, es espa√±ol
                tiene_espanol = any(c in text.lower() for c in ['√°', '√©', '√≠', '√≥', '√∫', '√±', '¬ø', '¬°'])
                palabras_espanol = ['hola', 'buenos', 'gracias', 'por', 'favor', 'que', 'como']
                es_espanol = tiene_espanol or any(palabra in text.lower() for palabra in palabras_espanol)
                
                source_lang = 'es' if es_espanol else 'en'
            
            logger.info(f"üåê Traduciendo de '{source_lang}' a '{target_lang}'")
            
            # Preparar par√°metros para MyMemory API
            params = {
                'q': text,
                'langpair': f"{source_lang}|{target_lang}"
            }
            
            # Hacer request a la API
            response = requests.get(
                self.base_url,
                params=params,
                timeout=15
            )
            response.raise_for_status()
            
            data = response.json()
            
            # Verificar respuesta
            if data.get('responseStatus') == 200 or 'responseData' in data:
                translated_text = data['responseData']['translatedText']
                
                # Verificar que no sea el mismo texto (traducci√≥n fallida)
                if translated_text.lower() == text.lower():
                    return {'error': 'No se pudo traducir. Verifica los idiomas.'}
                
                result = {
                    'original': text,
                    'translated': translated_text,
                    'source_lang': source_lang,
                    'target_lang': target_lang,
                    'source_name': self.languages.get(source_lang, source_lang),
                    'target_name': self.languages.get(target_lang, target_lang),
                    'source_flag': self.flags.get(source_lang, 'üåê'),
                    'target_flag': self.flags.get(target_lang, 'üåê')
                }
                
                logger.info(f"‚úÖ Traducci√≥n exitosa: {len(text)} ‚Üí {len(translated_text)} caracteres")
                return result
            else:
                error_msg = data.get('responseDetails', 'Error desconocido')
                return {'error': f'Error de traducci√≥n: {error_msg}'}
                
        except requests.exceptions.HTTPError as e:
            logger.error(f"‚ùå Error HTTP en traducci√≥n: {e}")
            return {'error': f'Error del servidor: {response.status_code}'}
            
        except requests.exceptions.Timeout:
            logger.error("‚ùå Timeout en API de traducci√≥n")
            return {'error': 'Tiempo de espera agotado. Intenta con texto m√°s corto.'}
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Error de conexi√≥n: {e}")
            return {'error': 'Error de conexi√≥n con el servicio de traducci√≥n'}
            
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
            return {'error': f'Error al traducir: {str(e)}'}
    
    
    def format_result(self, result: dict) -> str:
        """
        Formatea el resultado de traducci√≥n
        
        Args:
            result: Diccionario con datos de traducci√≥n
            
        Returns:
            Mensaje formateado
        """
        if 'error' in result:
            return f"‚ùå {result['error']}"
        
        # Limitar preview de texto original si es muy largo
        original_preview = result['original']
        if len(original_preview) > 200:
            original_preview = original_preview[:200] + '...'
        
        message = f"""
üåê **TRADUCCI√ìN**

{result['source_flag']} **{result['source_name']}:**
_{original_preview}_

{result['target_flag']} **{result['target_name']}:**
**{result['translated']}**

_Traducci√≥n autom√°tica - MyMemory_
        """
        
        return message.strip()
    
    
    def get_supported_languages(self) -> str:
        """
        Retorna lista de idiomas soportados
        """
        langs_list = "\n".join([
            f"{self.flags.get(code, 'üåê')} **{code.upper()}** - {name}"
            for code, name in sorted(self.languages.items(), key=lambda x: x[1])
        ])
        
        message = f"""
üåê **IDIOMAS SOPORTADOS**

{langs_list}

**Uso:** Usa los c√≥digos (ej: 'en', 'es', 'fr')
**L√≠mite:** 1000 caracteres por traducci√≥n
        """
        
        return message.strip()


# ============================================
# CREAR LANGCHAIN TOOL
# ============================================

def translate_text_function(query: str) -> str:
    """
    Funci√≥n wrapper para usar con LangChain Tool
    
    Formatos aceptados:
    - "translate 'hello' to spanish"
    - "traducir 'how are you' al espa√±ol"
    - "hello world en espa√±ol"
    
    Args:
        query: String con la consulta de traducci√≥n
        
    Returns:
        Resultado formateado como string
    """
    translator = Translator()
    
    try:
        # Parsear query de manera flexible
        query_lower = query.lower()
        
        # Detectar idioma destino
        target_lang = 'es'  # Default espa√±ol
        if 'to english' in query_lower or 'al ingl√©s' in query_lower or 'in english' in query_lower:
            target_lang = 'en'
        elif 'to spanish' in query_lower or 'al espa√±ol' in query_lower or 'en espa√±ol' in query_lower:
            target_lang = 'es'
        elif 'to french' in query_lower or 'al franc√©s' in query_lower or 'en franc√©s' in query_lower:
            target_lang = 'fr'
        elif 'to german' in query_lower or 'al alem√°n' in query_lower or 'en alem√°n' in query_lower:
            target_lang = 'de'
        elif 'to portuguese' in query_lower or 'al portugu√©s' in query_lower:
            target_lang = 'pt'
        elif 'to italian' in query_lower or 'al italiano' in query_lower:
            target_lang = 'it'
        
        # Extraer el texto a traducir
        text_to_translate = query
        
        # Intentar extraer texto entre comillas
        if "'" in query:
            parts = query.split("'")
            if len(parts) >= 2:
                text_to_translate = parts[1]
        elif '"' in query:
            parts = query.split('"')
            if len(parts) >= 2:
                text_to_translate = parts[1]
        else:
            # Remover palabras clave comunes
            keywords = ['translate', 'traducir', 'traduce', 'to', 'al', 'en', 'in', 
                       'english', 'spanish', 'espa√±ol', 'ingl√©s', 'french', 'franc√©s']
            text_to_translate = query
            for keyword in keywords:
                text_to_translate = text_to_translate.replace(keyword, '')
            text_to_translate = text_to_translate.strip()
        
        if not text_to_translate or len(text_to_translate) < 2:
            return "‚ùå No se encontr√≥ texto para traducir. Ejemplo: 'translate \"hello\" to spanish'"
        
        # Realizar traducci√≥n
        result = translator.translate(text_to_translate, 'auto', target_lang)
        return translator.format_result(result)
        
    except Exception as e:
        logger.error(f"Error en translate_text_function: {e}")
        return f"‚ùå Error al procesar traducci√≥n: {str(e)}"


# Crear la Tool de LangChain
translator_tool = Tool(
    name="TextTranslator",
    description=(
        "Traduce texto entre diferentes idiomas usando detecci√≥n autom√°tica. "
        "Formato: 'translate \"texto\" to [language]' o 'texto en [idioma]'. "
        "Idiomas soportados: espa√±ol (es), ingl√©s (en), franc√©s (fr), alem√°n (de), "
        "italiano (it), portugu√©s (pt), y m√°s. "
        "Detecta autom√°ticamente el idioma origen. M√°ximo 1000 caracteres. "
        "√ötil para comunicaci√≥n multiling√ºe y comprensi√≥n de textos en otros idiomas."
    ),
    func=translate_text_function
)


# Instancia global para uso directo
translator = Translator()


if __name__ == "__main__":
    # Testing
    trans = Translator()
    
    # Prueba 1: Ingl√©s a Espa√±ol
    print("Prueba 1: Ingl√©s ‚Üí Espa√±ol")
    result = trans.translate("Hello, how are you?", "en", "es")
    print(trans.format_result(result))
    print("\n" + "="*50 + "\n")
    
    # Prueba 2: Espa√±ol a Ingl√©s
    print("Prueba 2: Espa√±ol ‚Üí Ingl√©s")
    result = trans.translate("¬øC√≥mo est√° el clima hoy?", "es", "en")
    print(trans.format_result(result))
    print("\n" + "="*50 + "\n")
    
    # Prueba 3: Auto-detectar
    print("Prueba 3: Auto-detectar ‚Üí Franc√©s")
    result = trans.translate("I love programming", "auto", "fr")
    print(trans.format_result(result))
    print("\n" + "="*50 + "\n")
    
    # Prueba 4: Usando la tool
    print("Testing LangChain Tool:")
    print(translate_text_function("translate 'good morning' to spanish"))