import logging
import requests
from typing import Optional
from langchain.tools import Tool

logger = logging.getLogger(__name__)


class LyricsFinder:
    """
    Buscador de letras de canciones usando API gratuita
    API: lyrics.ovh (gratuita, sin key necesaria)
    """
    
    def __init__(self):
        # API gratuita sin autenticaci√≥n
        self.base_url = "https://api.lyrics.ovh/v1"
        
        logger.info("‚úÖ LyricsFinder inicializado")
    
    
    def search_lyrics(self, artist: str, song: str) -> dict:
        """
        Busca la letra de una canci√≥n
        
        Args:
            artist: Nombre del artista
            song: Nombre de la canci√≥n
            
        Returns:
            Diccionario con letra o error
        """
        try:
            # Limpiar y preparar nombres
            artist = artist.strip()
            song = song.strip()
            
            if not artist or not song:
                return {'error': 'Debe proporcionar artista y canci√≥n'}
            
            logger.info(f"üéµ Buscando: '{song}' de {artist}")
            
            # Hacer request a la API
            url = f"{self.base_url}/{artist}/{song}"
            response = requests.get(url, timeout=15)
            
            if response.status_code == 404:
                return {
                    'error': f'No se encontr√≥ la letra de "{song}" de {artist}. Verifica el nombre.'
                }
            
            response.raise_for_status()
            data = response.json()
            
            # Extraer letra
            if 'lyrics' in data and data['lyrics']:
                lyrics = data['lyrics'].strip()
                
                result = {
                    'artist': artist,
                    'song': song,
                    'lyrics': lyrics,
                    'length': len(lyrics),
                    'lines': len(lyrics.split('\n'))
                }
                
                logger.info(f"‚úÖ Letra encontrada: {result['lines']} l√≠neas")
                return result
            else:
                return {'error': 'La letra no est√° disponible en este momento'}
                
        except requests.exceptions.HTTPError as e:
            logger.error(f"‚ùå Error HTTP: {e}")
            return {'error': f'Error al buscar letra: {response.status_code}'}
            
        except requests.exceptions.Timeout:
            logger.error("‚ùå Timeout en API de letras")
            return {'error': 'Tiempo de espera agotado. Intenta de nuevo.'}
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Error de conexi√≥n: {e}")
            return {'error': 'Error de conexi√≥n con el servicio'}
            
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
            return {'error': f'Error al buscar letra: {str(e)}'}
    
    
    def format_result(self, result: dict, max_lines: int = 30) -> str:
        """
        Formatea el resultado de b√∫squeda de letra
        
        Args:
            result: Diccionario con datos de la letra
            max_lines: M√°ximo de l√≠neas a mostrar (para Telegram)
            
        Returns:
            Mensaje formateado
        """
        if 'error' in result:
            return f"‚ùå {result['error']}"
        
        # Limitar letra si es muy larga
        lyrics = result['lyrics']
        lines = lyrics.split('\n')
        
        if len(lines) > max_lines:
            # Mostrar primeras l√≠neas + indicador
            lyrics_preview = '\n'.join(lines[:max_lines])
            lyrics_preview += f"\n\n... ({len(lines) - max_lines} l√≠neas m√°s)"
        else:
            lyrics_preview = lyrics
        
        message = f"""
üéµ **{result['song'].upper()}**
üé§ **Artista:** {result['artist']}

üìù **Letra:**

{lyrics_preview}

---
üìä **Info:** {result['lines']} l√≠neas | {result['length']} caracteres
üí° _Si la letra est√° incompleta, b√∫scala completa en Genius o LyricFind_
        """
        
        return message.strip()
    
    
    def get_sample_searches(self) -> str:
        """
        Retorna ejemplos de b√∫squedas populares
        """
        samples = """
üéµ **EJEMPLOS DE B√öSQUEDA**

**√âxitos Latinos:**
‚Ä¢ Bad Bunny - Tit√≠ Me Pregunt√≥
‚Ä¢ Shakira - Hips Don't Lie
‚Ä¢ J Balvin - Mi Gente

**Pop Internacional:**
‚Ä¢ The Weeknd - Blinding Lights
‚Ä¢ Ed Sheeran - Shape of You
‚Ä¢ Taylor Swift - Anti-Hero

**Rock Cl√°sico:**
‚Ä¢ Queen - Bohemian Rhapsody
‚Ä¢ The Beatles - Hey Jude
‚Ä¢ Nirvana - Smells Like Teen Spirit

**Reggaeton:**
‚Ä¢ Daddy Yankee - Gasolina
‚Ä¢ Ozuna - Taki Taki
‚Ä¢ Karol G - Bichota

üí° **Formato:** Escribe artista y canci√≥n
        """
        return samples.strip()


# ============================================
# CREAR LANGCHAIN TOOL
# ============================================

def find_lyrics_function(query: str) -> str:
    """
    Funci√≥n wrapper para usar con LangChain Tool
    
    Formatos aceptados:
    - "lyrics of Imagine Dragons - Radioactive"
    - "letra de Bad Bunny Tit√≠ Me Pregunt√≥"
    - "find Shape of You by Ed Sheeran"
    - "Bohemian Rhapsody Queen"
    
    Args:
        query: String con artista y canci√≥n
        
    Returns:
        Resultado formateado como string
    """
    finder = LyricsFinder()
    
    try:
        # Limpiar query
        query = query.replace('lyrics of', '').replace('letra de', '').replace('find', '').strip()
        
        # Intentar parsear diferentes formatos
        artist = None
        song = None
        
        # Formato: "Artist - Song"
        if ' - ' in query:
            parts = query.split(' - ')
            artist = parts[0].strip()
            song = parts[1].strip()
        
        # Formato: "Song by Artist"
        elif ' by ' in query.lower():
            parts = query.lower().split(' by ')
            song = query[:len(parts[0])].strip()
            artist = query[len(parts[0]) + 4:].strip()
        
        # Formato: "Artist Song" (√∫ltimas 2-4 palabras como canci√≥n)
        else:
            words = query.split()
            if len(words) >= 2:
                # Asumir: primeras palabras = artista, √∫ltimas = canci√≥n
                # Si hay muchas palabras, dividir a la mitad
                mid = len(words) // 2
                artist = ' '.join(words[:mid])
                song = ' '.join(words[mid:])
            else:
                return "‚ùå Formato incorrecto. Usa: 'Artista - Canci√≥n' o 'Canci√≥n by Artista'"
        
        if not artist or not song:
            return "‚ùå No se pudo identificar artista y canci√≥n. Usa formato: 'Artista - Canci√≥n'"
        
        # Buscar letra
        result = finder.search_lyrics(artist, song)
        return finder.format_result(result)
        
    except Exception as e:
        logger.error(f"Error en find_lyrics_function: {e}")
        return f"‚ùå Error al buscar letra: {str(e)}"


# Crear la Tool de LangChain
lyrics_tool = Tool(
    name="LyricsFinder",
    description=(
        "Busca y muestra la letra completa de canciones. "
        "Formato: 'Artista - Canci√≥n' o 'Canci√≥n by Artista'. "
        "Funciona con artistas y canciones en espa√±ol e ingl√©s. "
        "Ejemplos: 'Bad Bunny - Tit√≠ Me Pregunt√≥', 'Shape of You by Ed Sheeran', "
        "'Queen - Bohemian Rhapsody'. "
        "√ötil para encontrar letras de canciones populares y cl√°sicas."
    ),
    func=find_lyrics_function
)


# Instancia global para uso directo
lyrics_finder = LyricsFinder()


if __name__ == "__main__":
    # Testing
    finder = LyricsFinder()
    
    # Prueba 1: Canci√≥n en ingl√©s
    print("Prueba 1: The Beatles - Hey Jude")
    result = finder.search_lyrics("The Beatles", "Hey Jude")
    print(finder.format_result(result, max_lines=20))
    print("\n" + "="*50 + "\n")
    
    # Prueba 2: Canci√≥n latina
    print("Prueba 2: Shakira - Waka Waka")
    result = finder.search_lyrics("Shakira", "Waka Waka")
    print(finder.format_result(result, max_lines=20))
    print("\n" + "="*50 + "\n")
    
    # Prueba 3: Usando la tool
    print("Testing LangChain Tool:")
    print(find_lyrics_function("Imagine Dragons - Radioactive"))
    print("\n" + "="*50 + "\n")
    
    # Prueba 4: Formato alternativo
    print("Testing formato alternativo:")
    print(find_lyrics_function("Blinding Lights by The Weeknd"))